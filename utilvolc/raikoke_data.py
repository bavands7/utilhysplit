import datetime
import os.path as path
import numpy as np
import numpy.ma as ma
import pandas as pd
from utilvolc import volcat
import matplotlib.pyplot as plt
from utilhysplit.evaluation.ensemble_plotting import ashcmap
import utilhysplit.evaluation.ensemble_tools as et
from matplotlib.colors import BoundaryNorm

def get_polygon(tdir):
    """
    tdir: str where file is located
    Return DataFrame with VAAC polygons
    """
    fname = 'VAAC_polygon_coordinates.csv'
    data = pd.read_csv(path.join(tdir,fname), index_col=None)
    data['DateTime'] = pd.to_datetime(data['DateTime'])
    data['DateTime_6hr'] = pd.to_datetime(data['DateTime_6hr'])
    return data 

def pick_polygon(polydf, date1, fhr, flight_level):
    """
    date1 : date of forecast
    fhr : '', 6hr, 12hr, 18hr
    """
    tempdf = polydf[polydf['DateTime']==date1]
    if fhr:
        latname = '{}_Lat'.format(fhr)
        lonname = '{}_Lon'.format(fhr)
        htname = '{}_SFC_FL'.format(fhr)
    else:
        latname = 'Lat'
        lonname = 'Lon'
        htname = 'SFC_FL'
    tempdf = tempdf[tempdf[htname] == flight_level]
    lat = tempdf[latname]
    lon = tempdf[lonname]
    return list(zip(lon,lat))    


def get_di_ens(date):
    massname = 'mass{}.nc'.format(str1)
    fdir = "/hysplit-users/allisonr/Raikoke/EMIT_TIMES/Data_Insertion/1hrAvg/par006/netcdf/"
    str1 = date.strftime('%Y%m%d.%H0000')
    str2 = (date + datetime.timedelta(hours=1)).strftime('%Y%m%d.%H0000')
    fname = date.strftime('forecasts_{}-{}.nc'.format(str1,str2))
    da1 = xr.open_dataset(fname)
    da1 = da1.p006
    da1mass = hysplit.hysp_massload(da1)
    massname = 'mass{}.nc'.format(str1)
    et.makenc(da1mass, 'mass{}.nc'.format(str1))
    return da1mass

def plotmass(date, coarsen=3):
    da1mass = get_di_ens(date)
    iii =0 
    if coarsen> 1:
       da1mass = da1mass.coarsen(x=3,boundary='trim').mean()
       da1mass = da1mass.coarsen(y=3,boundary='trim').mean()
    for source in da1.source.values:
        print('working on {}'.format(iii))
        rd.plotmass(da1.isel(source=iii,ens=0,time=0))
        plt.title(str(da1.source.values[iii]))
        plt.xlim(155,205)
        plt.ylim(35,63)
        plt.savefig('da1c{:03d}.png'.format(iii))
        iii+=1


def plotmass(dset):
    levels=[0,0.1,1,5,10,15,20,25,30,35,40,50,100]
    cmap = ashcmap(t=2)
    norm = BoundaryNorm(levels, ncolors=cmap.N, clip=False)
    cb = plt.pcolormesh(dset.longitude, dset.latitude,
                        dset.values,cmap=cmap,norm=norm)
    plt.colorbar(cb) 

class RaikokeVolcat:
    """
    for easy retrieval of data for Raikoke eruption 
    """
    def __init__(self):     
        # location of data
        self.directory="/pub/ECMWF/JPSS/VOLCAT/Raikoke/Ash/"
        # naming of data
        self.basename = 'SCOPE_NWC_ASH-L2-ASH_PRODUCTS-HIMAWARI8_NOAA-RAIKOKE-'
        self.suffix =  '00-fv2.nc'
        self.strfmt = "%Y%m%d-%H%M"
        self.year = [2019]
        self.month = [6]
        # days available
        self.day = [22,23,24]
        # hours available
        self.hour = np.arange(0,24)
        # minutes available
        self.minute = np.arange(0,60,10)


    def scatter(self,dset,thresh=0.01):
        mass = volcat.get_mass(dset).isel(time=0)
        longitude = mass.longitude.values
        latitude = mass.latitude.values
        values = mass.values
        vpi = np.where(values>thresh)
        plt.scatter(longitude[vpi],latitude[vpi],c=values[vpi],s=values[vpi],marker='.')   
        return latitude, longitude, mass

    def scatter_ht(sel,dset,thresh=0.01):
        ht = volcat.get_height(dset).isel(time=0)
        mass = volcat.get_mass(dset).isel(time=0)
        longitude = ht.longitude.values
        latitude = ht.latitude.values
        values = mass.values
        vpi = np.where(values>thresh)
        #plt.scatter(longitude[vpi],ht.values[vpi],c=values[vpi],s=values[vpi],marker='.')   
        cb = plt.scatter(longitude[vpi],ht.values[vpi],c=latitude[vpi],s=values[vpi],marker='.')   
        plt.colorbar(cb)


    def create_name(self, date):
        midname= date.strftime(self.strfmt)
        fname =self.basename + midname + self.suffix
        return path.join(self.directory, fname)

    def get_dset(self, date):
        """
        date : datetime object
        returns DataArray generated by volcat.open_dataset
        """
        fname = self.create_name(date)
        print('trying to open ', fname)
        dset = volcat.open_dataset(fname,pc_correct=False)
        return dset

    def combine_dsets(self, daylist=None, hlist=None, mlist=None):
        """
        combines data from different time periods into one xarray object.
        currently extracts only ash_mass.
        """
        iii=0
        for dset in self.generate_dsets(daylist,hlist,mlist):
            dra = volcat.get_mass(dset)
            if iii == 0:
               massra = dra
            if iii != 0:
               massra = xr.concat([massra, dra], dim='time')
            iii+=0
        return massra 


    def generate_dates(self, daylist=None, hlist=None, mlist=None):
        if not hlist: hlist = self.hour
        if not mlist: mlist = self.minute
        if not daylist: daylist = self.day
        for year in self.year:
            for month in self.month:
                for day in daylist:
                  for hr in hlist:
                    for mm in mlist:
                        date = datetime.datetime(year,month,day,hr,mm)
                        yield date

    def generate_dsets(self, daylist = None, hlist=None, mlist=None):
        for date in self.generate_dates(daylist,hlist,mlist):
            try:
              dset = self.get_dset(date)
            except:
              print('FILE cannot be opened ', self.create_name(date))
              continue
            yield dset
            
 
        #if not hlist: hlist = self.hour
        #if not mlist: mlist = self.minute
        #if not daylist: daylist = self.day
        #for year in self.year:
        #    for month in self.month:
        #        for day in daylist:
        #          for hr in hlist:
        #            for mm in mlist:
        #                date = datetime.datetime(year,month,day,hr,mm)
        #                try:
        #                  dset = self.get_dset(date)
        #                except:
        #                  print('FILE cannot be opened ', self.create_name(date))
        #                  continue
        #                yield dset


class ReventadorVolcat(RaikokeVolcat):
    """
    TO DO
    volcat.open_dataset does not work for these hdf files.
    need to use something else
    """

    def __init__(self):
        # location of data
        self.directory="/pub/ECMWF/JPSS/VOLCAT/Reventador/Ash/"
        self.basename = 'geocatL2.GOES-16.Full_Disk.'
        self.year = [2019]
        self.month = [2]
        self.day = [25]
        self.hour = np.arange(15,23)
        self.minute = np.arange(0,60,15)
        self.strfmt=("%Y%j.%H%M")
        self.suffix = "30.hdf" 

    def get_dset(self, date):
        """
        date : datetime object
        returns DataArray generated by volcat.open_dataset
        """
        fname = self.create_name(date)
        dset=volcat.open_dataset2(fname)
        return dset
